



Syntax:
Public int hashcode {
return value;
}















//harsha equals code




public class Book {
    ...
    public boolean equals(Object obj) {
        if (obj instanceof Book)
            return ISBN.equals((Book)obj.getISBN()); 
        else
            return false;
    }
}


//in b class

Book firstBook  = new Book("0201914670"); 
Book secondBook = new Book("0201914670");
if (firstBook.equals(secondBook)) {
    System.out.println("objects are equal");
} else {
    System.out.println("objects are not equal");
}


This program displays objects are equal even though firstBook and secondBook reference two distinct objects. They are considered equal because the objects compared contain the same ISBN number.

You should always override the equals() method if the identity operator is not appropriate for your class.

------------------------------------------
-------------------------------------------

You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable. (-Joshua Bloch)
Here is the contract, from the java.lang.Object specialization:

Whenever it(hashcode) is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.
If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.
It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.

----------------------------------------------------------------------------


// code - overriding hashcode
public class StringHelper {
  private String inputString;

  public StringHelper(String string) {
    inputString=string;
  }
  @Override
  public int hashCode() {
    return inputString.length();
  }
  public static void main(String[] args) {
    StringHelper helperObj = new StringHelper("string");
    StringHelper helperObj1 = new StringHelper("string");
    if(helperObj.hashCode() == helperObj1.hashCode()){
      System.out.println("HashCode are equal");
    }
    if(helperObj.equals(helperObj1)){
      System.out.println("Objects are equal");
    }else{
      System.out.println("Objects are not equal");
    }
  }
  public String getInputString() {
    return inputString;
  }
  // imagine equals() method is implemented. Will show how to implement 
  // later in article
}
// Output:
HashCode are equal
Objects are not equal


-----------------------------------------------------------------------


// code - overriding hashcode and equals



public class StringHelper {
  private String inputString;
  
  public StringHelper(String string) {
    inputString = string;
  }

  @Override
  public int hashCode() {
    return inputString.length();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    final StringHelper other = (StringHelper) obj;
    if (inputString == null && other.inputString != null) {
      return false;
    } else if (!inputString.equals(other.inputString))
      return false;
    return true;
  }

  public static void main(String[] args) {
    StringHelper helperObj = new StringHelper("string");
    StringHelper helperObj1 = new StringHelper("string");
    if(helperObj.hashCode() == helperObj1.hashCode()){
      System.out.println("HashCode are equal");
    }
    if(helperObj.equals(helperObj1)){
      System.out.println("Objects are equal");
    }else{
      System.out.println("Objects are not equal");
    }
  }
  public String getInputString() {
    return inputString;
  }
}
// Output:
HashCode are equal
Objects are equal














































































































